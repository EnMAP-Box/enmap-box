import datetime
import os
import shutil
import subprocess
import unittest

from enmapbox.algorithmprovider import EnMAPBoxProcessingProvider
from enmapbox.testing import start_app, TestCase
from enmapbox import registerEnMAPBoxProcessingProvider
from scripts.create_processing_rst import __file__ as path_processing_script, collectQgsProcessAlgorithmHelp, \
    escape_rst, \
    generateRST, QGIS_PROCESS_ENV, update_rst

start_app()
registerEnMAPBoxProcessingProvider()

RST_ORIGINAL = """
before
..
  ## AUTOGENERATED FOO START

blablala
..
  ## AUTOGENERATED FOO END
ending 1"""

RST_UPDATE = """

..
  ## AUTOGENERATED FOO START
changed blablabla
..
  ## AUTOGENERATED FOO END

DO_NOT_COPY_CODE_FROM_OUTSIDE_AUTOGENERATED_SECTIONS

..
  ## AUTOGENERATED NEW START
new blablabla
..
  ## AUTOGENERATED NEW END
"""

RST_RESULT = """
before
..
  ## AUTOGENERATED FOO START
changed blablabla
..
  ## AUTOGENERATED FOO END
ending 1
..
  ## AUTOGENERATED NEW START
new blablabla
..
  ## AUTOGENERATED NEW END
"""


class CreateProcessingRSTTestCases(TestCase):

    def test_update_rst(self):
        self.assertEqual(update_rst(RST_ORIGINAL, ''), RST_ORIGINAL)
        self.assertEqual(update_rst(RST_ORIGINAL, 'not in AUTOGENERATE section'), RST_ORIGINAL)
        self.assertEqual(update_rst(RST_ORIGINAL, RST_UPDATE), RST_RESULT)

    def test_generateRST(self):
        dir_tmp = self.createTestOutputDirectory()
        dir_rst_root = dir_tmp / 'rst_root1'
        generateRST(dir_rst_root,
                    algorithmIds=['gdal:translate', 'enmapbox:Build3DCube'],
                    load_process_help=False)

        expected_paths = [
            dir_rst_root / 'auxilliary' / 'build_3d_cube.rst',
            dir_rst_root / 'raster_conversion' / 'translate__convert_format_.rst'
        ]
        for p in expected_paths:
            self.assertTrue(p.is_file(), msg=f'File not created exist: {p}')

    @unittest.skipIf(TestCase.runsInCI(), 'Manual calls only')
    def test_buildall(self):

        result = subprocess.run(['python', str(path_processing_script)],
                                env=QGIS_PROCESS_ENV,
                                stderr=subprocess.PIPE
                                )
        self.assertEqual(result.returncode, 0, msg=result.stderr.decode())

    def test_escape_rst(self):

        examples = [
            ('* wor*d `line <https:*>`_ ', '\\* wor\\*d `line <https:*>`_ '),
            ('a*c', 'a\\*c'),
            ('abc', 'abc'),
            ('*c', '\\*c'),
            ('c*', 'c\\*'),
            ('[a]', '\\[a\\]'),
            (']a[', '\\]a\\['),
        ]
        for (text, expected) in examples:
            result = escape_rst(text)
            print(f'{text} -> {result} ({expected})')
            self.assertEqual(result, expected)

    @unittest.skipIf(TestCase.runsInCI(), 'Manual testing only')
    def test_collect_algorithm_help(self):

        algs = EnMAPBoxProcessingProvider.instance().algorithms()
        algs = algs[0:100]
        t0 = datetime.datetime.now()
        results1 = collectQgsProcessAlgorithmHelp(algs, run_async=True)
        t1 = datetime.datetime.now()
        results2 = collectQgsProcessAlgorithmHelp(algs, run_async=False)
        t2 = datetime.datetime.now()
        self.assertEqual(results1, results2)
        print(f'Async: {t1 - t0}\nNormal: {t2 - t1}')

    def test_script(self):
        dir_tmp = self.createTestOutputDirectory()
        dir_rst_root = dir_tmp / 'rst_root2'
        if dir_rst_root.is_dir():
            shutil.rmtree(dir_rst_root)
            os.makedirs(dir_rst_root)

        result = subprocess.run(['python', str(path_processing_script),
                                 '-r', str(dir_rst_root),
                                 '-a', 'Build3DCube'],
                                env=QGIS_PROCESS_ENV,
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE
                                )
        self.assertEqual(result.returncode, 0, msg=result.stderr.decode())

        expected_files = [
            dir_rst_root / 'processing_algorithms.rst',
            dir_rst_root / 'auxilliary' / 'build_3d_cube.rst',
            dir_rst_root / 'auxilliary' / 'index.rst',
        ]
        for p in expected_files:
            self.assertTrue(p.is_file(), msg=f'Missing file: {p}')


if __name__ == '__main__':
    unittest.main()
